name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11.4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller

      - name: Build with PyInstaller
        run: |
          python build.py

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: app-artifact
          path: ./dist/

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure Git Identity
        run: |
          git config --global user.name "Your Name"
          git config --global user.email "youremail@example.com"
        shell: bash
        
      - name: Determine New Tag Version
        id: determine_version
        run: |
          # Get the commit message of the latest commit
          commit_message=$(git log -1 --pretty=%B)
          
          # Extract the new version from the commit message using regular expressions or any other parsing logic
          # Here's an example using regular expressions to extract a version number like "vX.Y.Z"
          if [[ $commit_message =~ v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            new_tag="${BASH_REMATCH[1]}"
          else
            echo "No valid version number found in the commit message."
            exit 1
          fi
          
          echo "::set-output name=new_tag::$new_tag"
        shell: bash

      - name: Update Git Tag
        run: |
          new_tag="${{ steps.determine_version.outputs.new_tag }}"
          if [[ -z $new_tag ]]; then
            echo "No new tag to create."
          else
            git tag -a $new_tag -m "Update to version $new_tag"
            git push origin $new_tag
          fi

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: app-artifact

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./dist/*  # Include any other files you want in the release
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Release
        run: |
          echo "Release ID: ${{ steps.create_release.outputs.id }}"
        # You can add additional steps here if needed
